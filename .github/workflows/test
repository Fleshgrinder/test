#!/usr/bin/env bash
set -Eeuo pipefail

# region utils
log() { printf '::%s::%b\n' "$1" "$2"; }
log.debug() { log debug "$@"; }
log.notice() { log notice "$@"; }
log.warning() { log warning "$@"; }
log.error() { log error "$@"; }

group.start() { printf '::group::%b\n' "$1"; }
group.end() { printf '::endgroup::\n'; }
# endregion
# region list env
group.start 'List System Environment'
log.notice 'List of all available environment variables in this run:'
echo
env | sort
group.end
# endregion
# region list event
group.start 'List GitHub Event'
log.notice 'Lists the entire payload of the received GitHub event that triggered the run:'
echo
jq --color-output . "$GITHUB_EVENT_PATH"
group.end
# endregion
# region validate env
readonly GITHUB_EVENT_PATH=${GITHUB_EVENT_PATH:?missing required <GITHUB_EVENT_PATH> env var}
readonly GITHUB_RUN_ID=${GITHUB_RUN_ID?:missing required <GITHUB_RUN_ID> env var}
# endregion
# region post summary
group.start 'Post Summary'
gh api "/repos/$GITHUB_REPOSITORY/check-runs/$GITHUB_RUN_ID" --input - --method PATCH <<<'{
    "output": {
        "title": "Test Summary",
        "summary": "The **summary** can contain _GHF_ Markdown, including\n\nline feeds?",
        "text": "I guess that **text** is meant to contain the bulk of the check run?\n\nline feeds?"
    },
    "actions": [
        {
            "label": "Test Label",
            "description": "Test Description.",
            "identifier": "TEST"
        }
    ]
}'
group.end
# endregion post summary
